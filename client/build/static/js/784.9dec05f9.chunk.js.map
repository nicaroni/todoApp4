{"version":3,"file":"static/js/784.9dec05f9.chunk.js","mappings":"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","sources":["components/TodoItem.jsx","components/TodoForm.jsx","components/TodoList.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst TodoItem = ({ todo, dispatch }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [input, setInput] = useState(todo.description);\n\n  const handleComplete = () => {\n    const updatedTodo = { ...todo, completed: !todo.completed };\n\n    // Dispatch to update the state locally\n    dispatch({ type: \"TOGGLE_TODO_COMPLETED\", payload: updatedTodo });\n  };\n\n  const handleDelete = async () => {\n    const token = localStorage.getItem(\"authToken\"); // Get the token from localStorage\n    if (!token) {\n      console.error(\"No token found, please log in.\");\n      return; // Prevent the request from being sent if there's no token\n    }\n\n    try {\n      // Send DELETE request to the backend to delete the todo\n      await axios.delete(`http://localhost:5000/todos/${todo.todo_id}`, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`,  // Attach token here\n        },\n      });\n\n      dispatch({ type: \"DELETE_TODO\", payload: todo.todo_id });  // Update state after successful deletion\n    } catch (err) {\n      console.error(\"Error deleting todo:\", err);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    const options = {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    };\n    return new Date(dateString).toLocaleDateString(\"en-US\", options);\n  };\n\n  return (\n    <tr className={`todo-item-row ${todo.completed ? \"completed\" : \"\"}`}>\n      <td className=\"circle\" onClick={handleComplete}>\n        {todo.completed ? \"âœ“\" : \"\"}\n      </td>\n      <td className=\"todo-date\">{formatDate(todo.created_at)}</td>\n      <td className=\"todo-description\">\n        {isEditing ? (\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                dispatch({\n                  type: \"UPDATE_TODO\",\n                  payload: { ...todo, description: input },\n                });\n                setIsEditing(false);\n              }\n            }}\n            className=\"form-control\"\n          />\n        ) : (\n          <span onClick={() => setIsEditing(true)}>{todo.description}</span>\n        )}\n      </td>\n      <td className=\"delete-btn-cell\">\n        <button className=\"delete-btn\" onClick={handleDelete}>\n          Delete\n        </button>\n      </td>\n    </tr>\n  );\n};\n\n\nexport default TodoItem;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst TodoForm = ({ dispatch }) => {\n  const [input, setInput] = useState(\"\");\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n  \n    // Get the token from localStorage\n    const token = localStorage.getItem(\"authToken\"); // Retrieve the token from localStorage\n    if (!token) {\n      console.error(\"No token found, please log in.\");\n      return; // Prevent submitting if there's no token\n    }\n  \n    try {\n      const response = await axios.post(\n        \"http://localhost:5000/todos\",  // The backend API to create a todo\n        { description: input },  // The data (todo description)\n        {\n          headers: {\n            \"Authorization\": `Bearer ${token}`,  // Attach token here\n          },\n        }\n      );\n  \n      dispatch({ type: \"ADD_TODO\", payload: response.data });  // Dispatch the new todo to the state\n      setInput(\"\"); // Clear input after submitting\n    } catch (err) {\n      console.error(\"Error adding todo:\", err);\n    }\n  };\n  \n\n  return (\n    <form onSubmit={handleSubmit} className=\"todo-form\">\n      <div className=\"table-like-row\">\n        <div className=\"circle add-circle\">+</div>\n        <input\n          type=\"text\"\n          className=\"form-control todo-input\"\n          placeholder=\"Add a new todo...\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n        />\n        <button className=\"btn btn-primary add-todo-btn\" type=\"submit\">Add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default TodoForm;\n","import React, { useState } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport TodoForm from \"./TodoForm\";\n\nconst TodoList = ({ todos, dispatch }) => {\n  // State to toggle visibility of completed tasks\n  const [showCompleted, setShowCompleted] = useState(false);\n\n  // Filter todos into uncompleted and completed\n  const uncompletedTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  // Toggle completed tasks visibility\n  const toggleCompletedTasks = () => {\n    setShowCompleted(prev => !prev);\n  };\n\n  return (\n    <div className=\"todo-list\">\n      <table className=\"table table-borderless main-todo-table\">\n        <thead>\n          <tr>\n            <th className=\"todo-header\">Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* Map over uncompleted todos and display them */}\n          {uncompletedTodos.map((todo) => (\n            <TodoItem key={todo.todo_id} todo={todo} dispatch={dispatch} />\n          ))}\n\n          {/* Add the TodoForm as the last row */}\n          <tr className=\"todo-form-row\">\n            <td className=\"td-input\" colSpan=\"2\">\n              <TodoForm dispatch={dispatch} />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      {/* Button to toggle the visibility of completed tasks */}\n      <button onClick={toggleCompletedTasks} className=\"btn btn-secondary m-3\">\n        {showCompleted ? \"Hide Completed Tasks\" : \"Show Completed Tasks\"}\n      </button>\n\n      {/* Display completed tasks */}\n      {showCompleted && completedTodos.length > 0 && (\n        <div className=\"completed-todos\">\n          <h3>Completed Tasks</h3>\n          <table className=\"table table-dark table-striped\">\n            <tbody className=\"completed-table-body\">\n              {/* Map over completed todos and display them */}\n              {completedTodos.map((todo) => (\n                <TodoItem key={todo.todo_id} todo={todo} dispatch={dispatch} />\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TodoList;\n"],"names":["_ref","todo","dispatch","isEditing","setIsEditing","useState","input","setInput","description","_jsxs","className","completed","children","_jsx","onClick","handleComplete","updatedTodo","type","payload","dateString","created_at","Date","toLocaleDateString","year","month","day","hour","minute","value","onChange","e","target","onKeyDown","key","async","token","localStorage","getItem","axios","delete","todo_id","headers","err","console","error","onSubmit","preventDefault","response","post","data","placeholder","todos","showCompleted","setShowCompleted","uncompletedTodos","filter","completedTodos","map","TodoItem","colSpan","TodoForm","toggleCompletedTasks","prev","length"],"sourceRoot":""}